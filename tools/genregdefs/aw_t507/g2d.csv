# define G2D_TOP        (0x00000)
# define G2D_MIXER      (0x00100)
# define G2D_BLD        (0x00400)
# define G2D_V0         (0x00800)
# define G2D_UI0        (0x01000)
# define G2D_UI1        (0x01800)
# define G2D_UI2        (0x02000)
# define G2D_WB         (0x03000)
# define G2D_VSU        (0x08000)
# define G2D_ROT        (0x28000)
# define G2D_GSU        (0x30000)


#type; G2D_TOP; Graphic 2D top
#base; G2D_TOP 0x01480000

#irq; G2D 122

# https://github.com/MYIR-ALLWINNER/myir-t5-kernel/blob/a7089355dd727f5aaedade642f5fbc5b354b215a/arch/arm64/boot/dts/sunxi/sun50iw9p1-myir.dtsi#L1460

# https://github.com/MYIR-ALLWINNER/myir-t5-kernel/blob/a7089355dd727f5aaedade642f5fbc5b354b215a/drivers/char/sunxi_g2d/g2d_rcq/g2d_top_type.h#L111

# struct g2d_top_reg

#regdef; G2D_SCLK_GATE;	0x000;
#regdef; G2D_HCLK_GATE;	0x004;
#regdef; G2D_AHB_RST;	0x008;
#regdef; G2D_SCLK_DIV;	0x00C;
#regdefr; G2D_VERSION;	0x010;

##regdef; RCQ_IRQ_CTL;	0x020;
##regdef; RCQ_STATUS;	0x024;
##regdef; RCQ_CTRL;		0x028;
##regdef; RCQ_HEADER_LOW_ADDR;	0x02C; Register Configuration Queue Header bits 31..0
##regdef; RCQ_HEADER_HIGH_ADDR;	0x030; Register Configuration Queue Header bits 39..32
##regdef; RCQ_HEADER_LEN;	0x034; Register Configuration Queue length bits 15..0
#typeend;

##type; G2D_MIXER; Graphic 2D (G2D) Engine Video Mixer
##base; G2D_MIXER 0x01480100

# G2D_TOP + 0x0100

# https://github.com/MYIR-ALLWINNER/myir-t5-kernel/blob/a7089355dd727f5aaedade642f5fbc5b354b215a/drivers/char/sunxi_g2d/g2d_rcq/g2d_top_type.h#L153
# struct g2d_mixer_glb_reg

##regdef; G2D_MIXER_CTRL;	0x000;
##regdef; G2D_MIXER_INTERRUPT;	0x004;
##typeend;

##type; G2D_VI; Graphic 2D VI surface
##base; G2D_V0 0x01480800

##regdef; V0_ATTCTL; 0x00; V0_ATTCTL
##regdef; V0_MBSIZE; 0x04; Source rectangle size (may be empty)
##regdef; V0_COOR; 0x08; Target window position
##regdef; V0_PITCH0; 0x0C; V0_PITCH0
##regdef; V0_PITCH1; 0x10; V0_PITCH1
##regdef; V0_PITCH2; 0x14; V0_PITCH2
##regdef; V0_LADD0; 0x18; V0_LADD0
##regdef; V0_LADD1; 0x1C; V0_LADD1
##regdef; V0_LADD2; 0x20; V0_LADD2
##regdef; V0_FILLC; 0x24; V0_FILLC
##regdef; V0_HADD; 0x28; [31:24]: 0, [23:16]: LADD2 bits 40..32, [15:8]: LADD1 bits 40..32, [7:0]: LADD0 bits 40..32
##regdef; V0_SIZE; 0x2C; Source window size (may not be empty)
##regdef; V0_HDS_CTL0; 0x30; V0_HDS_CTL0
##regdef; V0_HDS_CTL1; 0x34; V0_HDS_CTL1
##regdef; V0_VDS_CTL0; 0x38; V0_VDS_CTL0
##regdef; V0_VDS_CTL1; 0x3C; V0_VDS_CTL1

##type; G2D_UI; Graphic 2D UI surface
##base; G2D_UI0 0x01481000
##base; G2D_UI1 0x01481800
##base; G2D_UI2 0x01482000

##regdef; UI_ATTR; 0x00; UIx_ATTR
##regdef; UI_MBSIZE; 0x04; UIx_MBSIZE
##regdef; UI_COOR; 0x08; UIx_COOR
##regdef; UI_PITCH; 0x0C; UIx_PITCH
##regdef; UI_LADD; 0x10; UIx_LADD
##regdef; UI_FILLC; 0x14; UIx_FILLC
##regdef; UI_HADD; 0x18; UIx_HADD
##regdef; UI_SIZE; 0x1C; UIx_SIZE

##regdef; padding 0; 0x800; set size
##typeend;

#type; G2D_ROT; Graphic 2D Rotate
#base; G2D_ROT 0x014A8000

#regdef; ROT_CTL; 0x00; ROT_CTL						
#regdef; ROT_INT; 0x04; ROT_INT				
#regdef; ROT_TIMEOUT; 0x08; ROT_TIMEOUT
#regdef; ROT_IFMT; 0x20; Input data attribute register
#regdef; ROT_ISIZE; 0x24; Input data size register
#regdef; ROT_IPITCH0; 0x30; Input Y/RGB/ARGB memory pitch register
#regdef; ROT_IPITCH1; 0x34; Input U/UV memory pitch register
#regdef; ROT_IPITCH2; 0x38; Input V memory pitch register
#regdef; ROT_ILADD0; 0x40; Input Y/RGB/ARGB memory address register0
#regdef; ROT_IHADD0; 0x44; Input Y/RGB/ARGB memory address register1
#regdef; ROT_ILADD1; 0x48; Input U/UV memory address register0
#regdef; ROT_IHADD1; 0x4C; Input U/UV memory address register1
#regdef; ROT_ILADD2; 0x50; Input V memory address register0
#regdef; ROT_IHADD2; 0x54; Input V memory address register1
#regdef; ROT_OSIZE; 0x84; Output data size register
#regdef; ROT_OPITCH0; 0x90; Output Y/RGB/ARGB memory pitch register
#regdef; ROT_OPITCH1; 0x94; Output U/UV memory pitch register
#regdef; ROT_OPITCH2; 0x98; Output V memory pitch register
#regdef; ROT_OLADD0; 0xA0; Output Y/RGB/ARGB memory address register0
#regdef; ROT_OHADD0; 0xA4; Output Y/RGB/ARGB memory address register1
#regdef; ROT_OLADD1; 0xA8; Output U/UV memory address register0
#regdef; ROT_OHADD1; 0xAC; Output U/UV memory address register1
#regdef; ROT_OLADD2; 0xB0; Output V memory address register0
#regdef; ROT_OHADD2; 0xB4; Output V memory address register1

# https://github.com/rvboards/linux_kernel_for_d1/blob/5703a18aa3ca12829027b0b20cd197e9741c4c0f/drivers/char/sunxi_g2d/g2d_rcq/g2d_rotate.c#L318

#regdef; LBC_ENC_CTL; 0xC8; Encode control (bit 31 - is lossy)
#regdef; LBC_CTL; 0xCC; 
#regdef; LBC_DEC_CTL; 0xD0; Decode control (bit 31 - is lossy) 
#typeend;


